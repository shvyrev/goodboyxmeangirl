/**
$(CBI)* $(ProjectID)
$(CBI)* @author $(DefaultUser)
$(CBI)*/

package $(CSLB){
	import flash.display.Sprite;
	import flash.events.Event;
	import flash.utils.Dictionary;
	//import com.millermedeiros.swffit.SWFFit;
	
	import railk.as3.TopLevel;
	import railk.as3.stage.*;
	import railk.as3.ui.SWFWheel;
	import railk.as3.ui.Structure;
	import railk.as3.ui.Localisation;
	import railk.as3.ui.loader.*;
	import railk.as3.utils.Logger;

	[Frame(factoryClass="Preloader")]
	public class Main extends Sprite $(CSLB){
		public var struct:Structure = Structure.getInstance();
		public var local:Localisation = Localisation.getInstance();
		
		public function Main():void {
			if (stage) init();
			else addEventListener(Event.ADDED_TO_STAGE, init);
		}

		private function init(e:Event = null):void {
			removeEventListener(Event.ADDED_TO_STAGE, init);
			TopLevel.init(this.parent);
			StageManager.init( TopLevel.stage, true );
			FullScreenMode.init( TopLevel.stage );
			//SWFWheel.init( TopLevel.stage );
			Logger.init(TopLevel.stage);
			
			///////////STARTUP/////////////
			loadUI(context())
				.add(language('FR'))
				.add(plugins())
				.complete(startup,UILoader.CONTENT)
				.start();
			///////////////////////////////
		}
		
		private function startup(content:Dictionary):void {
			local.addLanguage(content[language('FR')]);
			struct.init( TopLevel.main, new XML(content[context()]), content[plugins()], [PageLoading]);
			if (TopLevel.root.loaderInfo.parameters.page )struct.view((TopLevel.root.loaderInfo.parameters.page=='index')?'/':TopLevel.root.loaderInfo.parameters.page);
		}
		
		private function O(classe:Class, name:String ):Object { return { 'name':name, 'classe':classe }; }
		private function language(lang:String):String { return config+lang+'.txt'; }
		private function context(zip:Boolean=false):String { return config+'siteLocal'+((zip)?'.zip':'.xml'); }
		private function plugins():String { return config+'plugins.txt'; }
		private function get config():String { return TopLevel.local+'config/'; }
	}
}