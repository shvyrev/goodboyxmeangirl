/***  Process tween engine modification of Gtween*  http://www.gskinner.com/blog/archives/2008/08/gtween_a_new_tw.html* * @author Richard Rodney* @version 0.1*/package railk.as3.tween.process {		import flash.display.DisplayObject;	import flash.display.Shape;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.IEventDispatcher;	import flash.utils.Dictionary;		import railk.as3.tween.process.utils.*;	import railk.as3.tween.process.plugin.IPlugin;	import railk.as3.tween.process.plugin.sequence.ISequence;			public class Process extends EventDispatcher {				// ______________________________________________________________________________________ CONSTANTES		public static const TIME                         :String = "time";		public static const FRAME                        :String = "frame";		public static const HYBRID                       :String = "hybrid";		public static const VERSION                      :Number = 0.1;				// ________________________________________________________________________________ VARIABLES PROCESS		private static var tweens                      	 :Dictionary = new Dictionary();		private static var ticker                     	 :ITicker;		private static var _tickerMode                	 :String;		private static var _frameRate                 	 :uint = 40;		private static var _pauseAll                 	 :Boolean = false;				public var smartRotation                         :Boolean = false;		public var rounded                               :Boolean = false;		public var autoPlay                              :Boolean = true;		private var hasUpdate                            :Boolean = false;		public var onUpdate                              :Function;		public var ease                                  :Function;		public var easeParams                            :Object = null;		public var revert                                :Boolean = false		public var loop                                  :Boolean = false;		protected var _autoHide                          :Boolean = true;				private static var _pluginManager                :IPlugin;		private static var hasPlugin                     :Boolean = false;				protected var _target                            :Object;		protected var _position                          :Number=0;		protected var _duration                          :Number=10;		protected var _lastProgressPoint                 :ProgressPoint;		protected var _proxy                             :TargetProxy;		protected var _paused                            :Boolean=true;		protected var _state                             :String;		protected var _delay                             :Number = 0;		protected var _isDisplayObject                   :Boolean = false;		protected var _isActive                          :Boolean=false;		protected var endProps                           :Object;		protected var initProps                          :Object;		protected var progressPoints                     :Array;		protected var positionOffset                     :Number = NaN;		protected var ticker                             :ITicker;				// _________________________________________________________________________________ VARIABLES EVENT		private var eEvent                               :ProcessEvent;								// ——————————————————————————————————————————————————————————————————————————————————————————————————		// 																						 CONSTRUCTEUR		// ——————————————————————————————————————————————————————————————————————————————————————————————————		/**		 * @param	options        ease, easeParams, autoPlay, smartRotation, loop, revert, onUpdate		 */		public function Process( target:Object=null, duration:Number = 1, properties:Object = null, options:Object = null ):void {			if (!tickerMode) tickerMode = HYBRID;			if ( isNaN( duration )) duration = 1;			ticker = Process.ticker;			progressPoints = [];			this.target = target;			_duration = duration;			_state = 'begin';			setOptions( options );			setProperties( properties );				}				/**		 * @param	options        ease, easeParams, autoPlay, smartRotation, loop, revert, onUpdate		 */		public static function to( target:Object = null, duration:Number = 1, vars:Object = null, options:Object = null ):Process { 			return new Process( target, duration, vars, options ); 		}				// ——————————————————————————————————————————————————————————————————————————————————————————————————		// 																				  GESTION DES PLUGINS		// ——————————————————————————————————————————————————————————————————————————————————————————————————		/**		 * 		 * @param	plugins	[ 'sequence','bezier','filters','sound','text' ]		 */		public static function setPlugins( pluginManager:IPlugin, ...plugins ):void {			_pluginManager = pluginManager;			_pluginManager.enable( plugins );			hasPlugin = true;		}				// ——————————————————————————————————————————————————————————————————————————————————————————————————		// 																						   PROPERTIES		// ——————————————————————————————————————————————————————————————————————————————————————————————————		public function setOptions( options:Object ):void {			if (!options) return;			for (var n:String in options) {				if( n == 'onUpdate') hasUpdate = true				this[n] = options[n]; 			}		}				public function setProperties( properties:Object):void {			if (!properties) return;			for (var prop:String in properties) { setProperty(prop, properties[prop]); }		}				public function setProperty(propertyName:String, value:*):void {			if (_state == 'end') reset();			endProps[propertyName] = value;			activate();		}				public function getProperty(propertyName:String):Number { return endProps[propertyName]; }				public function deleteProperty(propertyName:String):Boolean { return delete endProps[propertyName]; }						// ——————————————————————————————————————————————————————————————————————————————————————————————————		// 																					 TWEEN MANAGEMENT		// ——————————————————————————————————————————————————————————————————————————————————————————————————		private function activate():void {			_isActive = true;			if (_position > 0) positionOffset = ticker.position-(_position = 0);			if (autoPlay) play();			else if (_state == 'end') _state = 'begin';		}				public function play():void { paused = false; }				public function pause():void { paused = true; }				public function reset():void {			_position = -_delay;			_state = 'begin';			pause();			initProps = _lastProgressPoint = null;			endProps = {};		}				public function reverse():void {			var props:Object = endProps;			endProps = initProps;			initProps = props;			_isActive = false;			if (_state == 'tween') positionOffset = ticker.position-(_position = _duration-_position);			if (loop) play();			if (revert) { revert=false; play(); }		}				public function beginning():void {			positionOffset = ticker.position-(_position = -_delay);			_state = 'begin';			pause();		}				public function end():void { position = _duration; }				// ——————————————————————————————————————————————————————————————————————————————————————————————————		// 																					   PROGRESS POINT		// ——————————————————————————————————————————————————————————————————————————————————————————————————		public function addProgressPoint(position:Number,data:*):void {			removeProgressPoint(data);			progressPoints.push(new ProgressPoint(position, data));			progressPoints.sortOn("position",Array.NUMERIC);		}				public function removeProgressPoint(data:*):void {			for (var i:int=progressPoints.length-1; i>=0; i--) {				if (progressPoints[i].data == data) {					progressPoints.splice(i,1);					break;				}			}		}				// ——————————————————————————————————————————————————————————————————————————————————————————————————		// 																						   	  ACTIONS		// ——————————————————————————————————————————————————————————————————————————————————————————————————		protected function manageTick(evt:Event):void {			if (Process.pauseAll) { positionOffset = ticker.position-_position; return; }			position = ticker.position - positionOffset;		}				protected function tween():void {			_state = (_position < 0) ? 'delay' : 'tween';			if (_position >= 0) initTween();		}				protected function initTween():void {			_state = 'tween';			saveInitProperties();			dispatchEvent(new ProcessEvent(ProcessEvent.ON_BEGIN, { info:'tween begin' } ));		}				protected function endTween():void {			_state = 'end';			paused = true;			dispatchEvent(new ProcessEvent(ProcessEvent.ON_COMPLETE,{info:'tween complete'}));			if (loop || revert ) reverse();		}		protected function update():void {			if (_state == 'begin' || _state == 'end') tween();			if (_position < 0) return;			if (_state == 'delay') initTween();			else if (_state == 'tween' && _isActive) saveInitProperties();			var factor:Function = (ease == null) ? linearTween : ease;			var value:Number = factor(_position / _duration, 0, 1, 1);			updateProperties(value);			if ( _isDisplayObject && _autoHide) { _target.visible = (_target.alpha > 0); }			if ( hasUpdate ) onUpdate.apply();			checkProgressPoint();			if (_position >= _duration) { endTween(); }		}				protected function updateProperties(value:Number):void {			for (var n:String in endProps) {				if ( n != 'glow' && n != 'dropShadow' && n != 'bevel' && n != 'blur' && n != 'sequence' && n != 'sound' && n != 'text' && n != 'bezier' && n != 'color' )				{					var val:Number = initProps[n] + (endProps[n] - initProps[n]) * value;					_target[n] = rounded ? int(val) : val;				}				else { if ( hasPlugin ) _pluginManager.update( _target, n, endProps[n], value ); }			}		}				protected function checkProgressPoint():void {			var obj:ProgressPoint = null;			for (var i:uint=0; i<progressPoints.length; i++) {				if (progressPoints[i].position > _position) break;				obj = progressPoints[i] as ProgressPoint;			}			if (obj != null && obj != _lastProgressPoint) {				_lastProgressPoint = obj;				dispatchEvent(new ProcessEvent(ProcessEvent.ON_PROGRESS_POINT,{info:_lastProgressPoint.position, data:_lastProgressPoint.data}));			}		}				protected function saveInitProperties():void {			if (!_isActive) { return; }			initProps = {};			for (var n:String in endProps) {				if (smartRotation && n == "rotation") rotation( n,'rotation');				else if (smartRotation && n == "rotation2") rotation( n, 'rotation2');				else initProps[n] = ( !_target.hasOwnProperty(n) ) ? null : _target[n];			}			_isActive = false;		}				protected function rotation( n:String, prop:String ):void {			var tr:Number = endProps[prop] %360;			var r:Number = initProps[prop] = _target[n] % 360;			var abs:Number = tr-r;			if (abs < 0)  abs = -abs;			tr += (abs < 180) ? 0 : (tr>r) ? -360 : 360;			endProps[n] = tr;		}		protected function frame( value:Number):void {			_target.gotoAndStop(int(value));		}		protected function linearTween( t:Number, b:Number, c:Number, d:Number ):Number { return c*t/d + b; }				protected function nullListener(evt:Event):void { }						// ——————————————————————————————————————————————————————————————————————————————————————————————————		// 																				  		GETTER/SETTER		// ——————————————————————————————————————————————————————————————————————————————————————————————————		public static function get tickerMode():String { return _tickerMode; }				public static function set tickerMode(value:String):void {			value = (value == FRAME || value == TIME) ? value : HYBRID;			if (value == _tickerMode) { return; }			_tickerMode = value;			if (_tickerMode == TIME) {				ticker = new TimeTicker();				(ticker as TimeTicker).interval = _frameRate/1000;			} 			else if (_tickerMode == FRAME) ticker = new FrameTicker();			else ticker = new HybridTicker();		}				public static function get frameRate():uint { return _frameRate; }				public static function set frameRate(value:uint):void {			_frameRate = value;			if (ticker is TimeTicker) (ticker as TimeTicker).interval = _frameRate/1000;		}				public function get proxy():Object {			if (_proxy == null) { _proxy = new TargetProxy(this); }			return _proxy;		}				public function get target():Object { return _target; }				public function set target(value:Object):void 		{			_target = (value === null) ? {} : value;			if (_target is DisplayObject ) _isDisplayObject = true;			reset();		}				public function get position():Number { return _position; }				public function set position(value:Number):void {			value = (value > _duration) ? _duration : ((value < -_delay) ? -_delay : value);			if (_position == value) { return; }			positionOffset = ticker.position-(_position = value);			update();		}				public function get duration():Number { return _duration; }				public function set duration(value:Number):void { _duration = value; }				public function get delay():Number { return _delay; }				public function set delay(value:Number):void {			if (_state == 'begin' || _position == -_delay) positionOffset = ticker.position-(_position = -value);			_delay = value;		}				public function get autoHide():Boolean { return _autoHide; }				public function set autoHide(value:Boolean):void {			_autoHide = value;			if (_isDisplayObject) _target.visible = (_target.alpha > 0);		}				public function get state():String { return _state; }				public function get paused():Boolean { return _paused; }				public function set paused(value:Boolean):void {			if (_paused == value) { return; }			_paused = value;			if (value) {				ticker.removeEventListener("tick",manageTick);				if (_target is IEventDispatcher) _target.removeEventListener("DUMMY_EVENT", nullListener);				delete(tweens[this]);			} else {				if (_state == 'begin' || _state == 'end') {					_position = -_delay;					tween();				}				positionOffset = ticker.position-_position;				ticker.addEventListener("tick",manageTick);				if (_target is IEventDispatcher) _target.addEventListener("DUMMY_EVENT", nullListener,false,0,false);				else tweens[this] = true;			}		}				static public function get pauseAll():Boolean { return _pauseAll; }				static public function set pauseAll(value:Boolean):void { _pauseAll = value; }				public static function get sequence():ISequence { return _pluginManager.getSequence(); }	}}